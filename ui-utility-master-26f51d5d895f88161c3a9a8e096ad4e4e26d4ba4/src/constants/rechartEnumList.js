/**
 * get the normal case, special case value will ignore
 *
 * @see http://recharts.org/#/en-US/api/???
 */
export default {
  AreaChart: {
    layout: ['horizontal', 'vertical'],
    stackOffset: ['expand', 'none', 'wiggle', 'silhouette'],
    baseValue: ['dataMin', 'dataMax', 'auto'],
  },
  BarChart: {
    layout: ['horizontal', 'vertical'],
    stackOffset: ['expand', 'none', 'wiggle', 'silhouette', 'sign'],
  },
  LineChart: {
    layout: ['horizontal', 'vertical'],
  },
  ComposedChart: {
    layout: ['horizontal', 'vertical'],
  },
  Legend: {
    layout: ['horizontal', 'vertical'],
    align: ['left', 'center', 'right'],
    verticalAlign: ['top', 'middle', 'bottom'],
  },
  Tooltip: {
    animationEasing: ['ease', 'ease-in', 'ease-out', 'ease-in-out', 'linear'],
  },
  Pie: {
    legendType: [
      'line',
      'square',
      'rect',
      'circle',
      'cross',
      'diamond',
      'square',
      'star',
      'triangle',
      'wye',
    ],
    animationEasing: ['ease', 'ease-in', 'ease-out', 'ease-in-out', 'linear'],
  },
  Scatter: {
    legendType: [
      'line',
      'square',
      'rect',
      'circle',
      'cross',
      'diamond',
      'square',
      'star',
      'triangle',
      'wye',
    ],
    shape: [
      'circle',
      'cross',
      'diamond',
      'square',
      'star',
      'triangle',
      'wye',
    ],
    lineType: ['joint', 'fitting'],
    animationEasing: ['ease', 'ease-in', 'ease-out', 'ease-in-out', 'linear'],
  },
  Radar: {
    animationEasing: ['ease', 'ease-in', 'ease-out', 'ease-in-out', 'linear'],
  },
  PolarGrid: {
    gridType: ['polygon', 'circle'],
  },
  PolarRadiusAxis: {
    orientation: ['left', 'right', 'middle'],
    scale: [
      'auto',
      'linear',
      'pow',
      'sqrt',
      'log',
      'identity',
      'time',
      'band',
      'point',
      'ordinal',
      'quantile',
      'quantize',
      'utcTime',
      'sequential',
      'threshold',
    ],
  },
  Area: {
    type: [
      'basis',
      'basisClosed',
      'basisOpen',
      'linear',
      'linearClosed',
      'natural',
      'monotoneX',
      'monotoneY',
      'monotone',
      'step',
      'stepBefore',
      'stepAfter',
    ],
    legendType: [
      'line',
      'square',
      'rect',
      'circle',
      'cross',
      'diamond',
      'square',
      'star',
      'triangle',
      'wye',
    ],
    layout: ['horizontal', 'vertical'],
    animationEasing: ['ease', 'ease-in', 'ease-out', 'ease-in-out', 'linear'],
  },
  Bar: {
    layout: ['horizontal', 'vertical'],
    legendType: [
      'line',
      'square',
      'rect',
      'circle',
      'cross',
      'diamond',
      'square',
      'star',
      'triangle',
      'wye',
    ],
    animationEasing: ['ease', 'ease-in', 'ease-out', 'ease-in-out', 'linear'],
  },
  Line: {
    type: [
      'basis',
      'basisClosed',
      'basisOpen',
      'linear',
      'linearClosed',
      'natural',
      'monotoneX',
      'monotoneY',
      'monotone',
      'step',
      'stepBefore',
      'stepAfter',
    ],
    legendType: [
      'line',
      'square',
      'rect',
      'circle',
      'cross',
      'diamond',
      'square',
      'star',
      'triangle',
      'wye',
    ],
    layout: ['horizontal', 'vertical'],
    animationEasing: ['ease', 'ease-in', 'ease-out', 'ease-in-out', 'linear'],
  },
  XAxis: {
    orientation: ['bottom', 'top'],
    type: ['number', 'category'],
    interval: ['preserveStart', 'preserveEnd', 'preserveStartEnd'],
    scale: [
      'auto',
      'linear',
      'pow',
      'sqrt',
      'log',
      'identity',
      'time',
      'band',
      'point',
      'ordinal',
      'quantile',
      'quantize',
      'utcTime',
      'sequential',
      'threshold',
    ],
  },
  YAxis: {
    orientation: ['left', 'right'],
    type: ['number', 'category'],
    interval: ['preserveStart', 'preserveEnd', 'preserveStartEnd'],
    scale: [
      'auto',
      'linear',
      'pow',
      'sqrt',
      'log',
      'identity',
      'time',
      'band',
      'point',
      'ordinal',
      'quantile',
      'quantize',
      'utcTime',
      'sequential',
      'threshold',
    ],
  },
};
